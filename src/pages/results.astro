---
import Layout from '../layouts/Layout.astro'
import { getProfile } from '../lib/spotify/spotifyApi'

const accessToken = Astro.cookies.get('spotify_token')!
const profile = await getProfile(accessToken.value)
const image = profile.images[0]
---

<Layout title="melon | results" transition:persist>
  <script>
    import { getTopTracks } from '../lib/spotify/spotifyApi'
    import type { ISpotifyTrack } from 'jvb-spotty-models'
    import { getCookie } from '../lib/util/cookie'
    import { s3Playlists, type S3PlaylistJson } from '../stores/s3Json'

    export class ResultsPage extends HTMLDivElement {
      timePeriod: 'short' | 'long' = 'short'

      constructor() {
        super()

        this.loadData()
      }

      async loadPlaylists() {
        return new Promise<S3PlaylistJson[]>((resolve) => {
          s3Playlists.subscribe(({ status, data }) => {
            if (status === 'loaded') {
              resolve(data)
            }
          })
        })
      }

      async loadData() {
        const [usersTracks, playlists] = await Promise.all([
          this.loadUsersTracks(),
          this.loadPlaylists(),
        ])

        const tonysTracks = new Set<string>()
        playlists.forEach((p) => {
          p.trackIds.forEach((id) => {
            tonysTracks.add(id)
          })
        })

        const melonTracks = usersTracks.filter((t) => {
          const justId = t.id.split(':').pop()!
          return tonysTracks.has(justId)
        })

        this.setScore(
          (melonTracks.length / usersTracks.length) * 100,
          melonTracks
        )
      }

      async loadUsersTracks() {
        const token = getCookie('spotify_token')
        if (!token) {
          console.error('no spotify token cookie found')
          window.location.pathname = '/'
          return []
        }

        return await getTopTracks({
          token,
          numberOfTracks: this.timePeriod === 'short' ? 20 : 50,
          timePeriod: this.timePeriod,
        })
      }

      setScore(percentage: number, matchedTracks: ISpotifyTrack[]) {
        console.log('setScore')
        const results = this.template
        const score =
          results.querySelector<HTMLParagraphElement>('[data-score]')!
        score.innerText = percentage.toFixed(2)
        const matches =
          results.querySelector<HTMLUListElement>('[data-matches]')!
        matchedTracks.forEach((track) => {
          const li = document.createElement('li')
          li.innerText = `"${track.name}" by ${track.artists[0].name}`
          matches.appendChild(li)
        })

        this.appendChild(results)
      }

      get template() {
        return this.querySelector<HTMLTemplateElement>(
          'template[data-results]'
        )!.content.cloneNode(true) as HTMLTemplateElement
      }
    }
    customElements.define('results-page', ResultsPage, {
      extends: 'div',
    })
  </script>
  <style>
    p {
      color: white;
    }
    ul {
      color: white;
    }
  </style>
  <main is="results-page">
    <h1>Results Page</h1>
    <p>{profile.display_name}</p>
    <img src={image?.url} />
    <template data-results>
      <p data-score></p>
      <ul data-matches></ul>
    </template>
  </main>
</Layout>
